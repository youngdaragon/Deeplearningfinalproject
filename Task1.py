# -*- coding: utf-8 -*-
"""DeeplearningFinalProject_(1).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jJ4HkFyE_H7vkajBpqimrmKRL9LdlReq
"""

from google.colab import drive
drive.mount('/content/drive')

import random
import os
import torch
from PIL import Image
root_dir = '/content/drive/MyDrive/dogbird'
train_dir = os.path.join(root_dir, 'train')
test_dir = os.path.join(root_dir, 'test')

import torch
import torch.nn as nn
import torch.optim as optim
import torchvision
import torchvision.transforms as transforms
from torch.utils.data import Dataset, DataLoader
from PIL import Image
import pandas as pd
import os

class DogBirdDataset(Dataset):
    def __init__(self, csv_file, root_dir, transform=None):
        self.annotations = pd.read_csv(csv_file)
        self.root_dir = root_dir
        self.transform = transform

    def __len__(self):
        return len(self.annotations)

    def __getitem__(self, index):
        img_path = os.path.join(self.root_dir, self.annotations.iloc[index, 0])
        image = Image.open(img_path).convert("RGB")
        label = torch.tensor(int(self.annotations.iloc[index, 1]))

        if self.transform:
            image = self.transform(image)

        return (image, label)

transform = transforms.Compose([
    transforms.Resize((240, 120)),
    transforms.ToTensor(),
    transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))
])

# 데이터셋 로드
train_data = DogBirdDataset(csv_file=root_dir+'/'+'train_annotation.csv', root_dir=root_dir+'/train', transform=transform)
train_loader = DataLoader(train_data, batch_size=8, shuffle=True, num_workers=2, drop_last=True)

# 모델 정의
resnet = torchvision.models.resnet50(weights=None, num_classes=3)

model_path = '/content/drive/MyDrive/dogbird/resnet_model_epoch5.pth'
# 저장된 가중치 로드
resnet.load_state_dict(torch.load(model_path))

# 손실 함수와 최적화 알고리즘
criterion = nn.CrossEntropyLoss()
optimizer = optim.AdamW(resnet.parameters(), lr=0.001)

import time
import torch
# 학습 시작 시간 기록
start_time = time.time()
max_execution_time = 10 * 60 * 60  # 10시간을 초로 환산
# 학습 시작
for epoch in range(15):  # 예제에서는 10회의 에폭으로 설정
    running_loss = 0.0

    for i, data in enumerate(train_loader, 0):
        inputs, labels = data

        # 기울기를 0으로 설정
        optimizer.zero_grad()

        # 현재 실행 시간 계산
        current_time = time.time() - start_time
        if current_time > max_execution_time:
          print('10시간 도달')
          break

        # 순방향 + 역방향 + 최적화
        outputs = resnet(inputs)
        loss = criterion(outputs, labels)
        loss.backward()
        optimizer.step()

        # 통계 출력
        running_loss += loss.item()

        if i % 100 == 99:    # print every 100 mini-batches
            print('[%d, %5d] loss: %.3f' % (epoch + 1, i + 1, running_loss / 100))
            running_loss = 0.0
    end_time = time.time()

    # 에폭 실행 시간 계산
    epoch_time = end_time - start_time

    # 통계 및 실행 시간 출력
    print('epochs time: %.2fs' % (epoch_time))

    # 모델 저장 경로 지정
    model_path = '/content/drive/MyDrive/dogbird/resnet_model_epoch'+str(epoch)+'.pth'

    # 모델 저장
    torch.save(resnet.state_dict(), model_path)
    print('Finished Training and Saved the Model')

    
    
end_time2 = time.time()

# 에폭 실행 시간 계산
all_time = end_time2 - start_time

# 통계 및 실행 시간 출력
print('Training time: %.2fs' % (all_time))
print('Finished Training')

test_data = DogBirdDataset(csv_file=root_dir+'/'+'test_annotation.csv', root_dir=root_dir+'/test', transform=transform)
test_loader = DataLoader(test_data, batch_size=8, shuffle=False, num_workers=2)
import time
# 모델 평가 모드로 설정
resnet.eval()
start_time = time.time()
correct = 0
total = 0

# 모델 실행 및 정확도 계산
with torch.no_grad():
    for data in test_loader:
        images, labels = data
        outputs = resnet(images)
        _, predicted = torch.max(outputs.data, 1)
        total += labels.size(0)
        correct += (predicted == labels).sum().item()

accuracy = 100 * correct / total
print('Accuracy: %.2f %%' % accuracy)
end_time = time.time()
execution_time = end_time - start_time
print('Execution Time: %.2f seconds' % execution_time)